{"version":3,"sources":["components/Mailbox.js","App.js","serviceWorker.js","index.js"],"names":["mailbox","props","state","name","email","message","e","preventDefault","axios","method","url","data","this","then","response","status","alert","resetForm","setState","className","id","onSubmit","handleSubmit","bind","htmlFor","type","value","onChange","onNameChange","aria-describedby","onEmailChange","rows","onMessageChange","event","target","Component","App","Mailbox","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"4RAuEeA,E,kDAnEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,GACNC,MAAO,GACPC,QAAS,IALE,E,yDASNC,GAAI,IAAD,OACZA,EAAEC,iBACFC,IAAM,CACFC,OAAQ,OAERC,IAAK,QACLC,KAAMC,KAAKV,QACZW,MAAK,SAACC,GACwB,YAAzBA,EAASH,KAAKI,QACdC,MAAM,iBACN,EAAKC,aAC2B,SAAzBH,EAASH,KAAKI,QACrBC,MAAM,gC,kCAMdJ,KAAKM,SAAS,CAAEf,KAAM,GAAIC,MAAO,GAAIC,QAAS,O,+BAI9C,OACI,yBAAKc,UAAU,OACX,0BAAMC,GAAG,eAAeC,SAAUT,KAAKU,aAAaC,KAAKX,MAAOH,OAAO,QACnE,yBAAKU,UAAU,cACX,2BAAOK,QAAQ,QAAf,QACA,2BAAOC,KAAK,OAAON,UAAU,eAAeC,GAAG,OAAOM,MAAOd,KAAKV,MAAMC,KAAMwB,SAAUf,KAAKgB,aAAaL,KAAKX,SAEnH,yBAAKO,UAAU,cACX,2BAAOK,QAAQ,sBAAf,iBACA,2BAAOC,KAAK,QAAQN,UAAU,eAAeC,GAAG,QAAQS,mBAAiB,YAAYH,MAAOd,KAAKV,MAAME,MAAOuB,SAAUf,KAAKkB,cAAcP,KAAKX,SAEpJ,yBAAKO,UAAU,cACX,2BAAOK,QAAQ,WAAf,WACA,8BAAUL,UAAU,eAAeY,KAAK,IAAIX,GAAG,UAAUM,MAAOd,KAAKV,MAAMG,QAASsB,SAAUf,KAAKoB,gBAAgBT,KAAKX,SAE5H,4BAAQa,KAAK,SAASN,UAAU,mBAAhC,c,mCAMHc,GACTrB,KAAKM,SAAS,CAAEf,KAAM8B,EAAMC,OAAOR,U,oCAGzBO,GACVrB,KAAKM,SAAS,CAAEd,MAAO6B,EAAMC,OAAOR,U,sCAGxBO,GACZrB,KAAKM,SAAS,CAAEb,QAAS4B,EAAMC,OAAOR,Y,GA9DxBS,aCCP,SAASC,IACtB,OACE,yBAAKjB,UAAU,OACb,kBAACkB,EAAD,OCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjD,c","file":"static/js/main.96bf5199.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass mailbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            email: '',\n            message: ''\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        axios({\n            method: \"POST\",\n            // url: \"http://localhost:3000/send\",\n            url: \"/\" + \"send\",\n            data: this.state\n        }).then((response) => {\n            if (response.data.status === 'success') {\n                alert(\"Message Sent.\");\n                this.resetForm()\n            } else if (response.data.status === 'fail') {\n                alert(\"Message failed to send.\")\n            }\n        })\n    }\n\n    resetForm() {\n        this.setState({ name: '', email: '', message: '' })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <form id=\"contact-form\" onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Name</label>\n                        <input type=\"text\" className=\"form-control\" id=\"name\" value={this.state.name} onChange={this.onNameChange.bind(this)} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"exampleInputEmail1\">Email address</label>\n                        <input type=\"email\" className=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" value={this.state.email} onChange={this.onEmailChange.bind(this)} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"message\">Message</label>\n                        <textarea className=\"form-control\" rows=\"5\" id=\"message\" value={this.state.message} onChange={this.onMessageChange.bind(this)} />\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                </form>\n            </div>\n        );\n    }\n\n    onNameChange(event) {\n        this.setState({ name: event.target.value })\n    }\n\n    onEmailChange(event) {\n        this.setState({ email: event.target.value })\n    }\n\n    onMessageChange(event) {\n        this.setState({ message: event.target.value })\n    }\n}\n\n\n\nexport default mailbox;","import React from 'react';\nimport './App.css';\nimport Mailbox from './components/Mailbox.js';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Mailbox />\n    </div>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}